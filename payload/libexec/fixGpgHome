#!/bin/bash
################################################################################
# fixes GNUPGHOME and gpg-agent.conf
#
# @author	Mento (mento@gpgtools.org)
# @see		http://gpgtools.org
# @thanks	Alex (alex@gpgtools.org) and Benjamin Donnachie. I adopted their script.
################################################################################

LOGFILE="$HOME/Library/Logs/gpg-home-fixer.log"
SCRIPT_NAME="[${0##*/}]"

# Helper functions #############################################################
function log {
    current_date=$(date "+%Y-%m-%d %H:%M:%S")
    echo "$current_date: $SCRIPT_NAME $*"
}
function runAsUser {
	if [[ "$UID" -eq 0 ]] ;then
		temp_uid=$ACTUAL_UID
		[[ "$temp_uid" =~ [^0-9] ]] || temp_uid="#$temp_uid"
		sudo -nu "$temp_uid" "${@}"
	else
		"${@}"
	fi
}

function logging {
	# Enables logging into $LOGFILE and to stdout.
	
	touch "$LOGFILE"
	owner=$(stat -f "%u" "${LOGFILE%/*}")

	# Use the `-h` option for `chown` to make sure that
	# if the changed file / folder is a symlink, only
	# the symlinkn itself has its permission changed, and not
	# the target file.
	# Otherwise an attacker could abuse that, to e.g. chown
	# a root-owned file to a user owned file.
	[[ -n "$owner" ]] && chown -h "$owner" "$LOGFILE"
	
	tempdir=$(mktemp -d -t org.gpgtools.log)
	if [[ -d "$tempdir" ]]; then
		trap "rm -rf '$tempdir'" EXIT
		mkfifo "$tempdir/fifo"
		tee -a <"$tempdir/fifo" "$LOGFILE" &
		exec &>"$tempdir/fifo"
	else
		echo "Unable to create the temp dir. Log only into '$LOGFILE'" >&2
		exec >>"$LOGFILE" 2>&1
	fi
}

function errExit {
	msg="$* (${BASH_SOURCE[1]##*/}: line ${BASH_LINENO[0]})"
	if [[ -t 1 ]] ;then
		echo -e "\033[1;31m$msg\033[0m" >&2
	else
		echo "$msg" >&2
	fi
	exit 1
}
################################################################################


function fixGpgHome {
	log "Fixing '$GNUPGHOME'..."

	# Permissions
	[[ -e "$GNUPGHOME" ]] || mkdir -m 0700 "$GNUPGHOME"
	
	HOME_GROUP=":staff"
	gnupgGroup=$(stat -f "%Sg" "$GNUPGHOME")
	if [[ "$gnupgGroup" =~ ^(staff|wheel)$ && "$gnupgGroup" == "$(stat -f "%Sg" "$HOME")" ]]; then
		# If $GNUPGHOME is owned by another group than staff or wheel
		# and the same group owns $HOME, the owner group for $GNUPGHOME isn't changed.
		HOME_GROUP=""
	fi
	
	chmod -RN "$GNUPGHOME" 2>/dev/null # Remove ACL.
	chown -Rh "$ACTUAL_UID${HOME_GROUP}" "$GNUPGHOME"
	chmod -R u+rwX,go= "$GNUPGHOME"
	
	log "Fixing done"
}

function fixGPGAgent {
	log "fixGPGAgent started"
	
	gpgAgentConf="$GNUPGHOME/gpg-agent.conf"
	if [[ ! -e "$gpgAgentConf" ]]; then
		log "gpg-agent.conf doesn't exist."
		return 0
	fi
	
	needHup=false
	
	# Remove a bad pinentry option.
	currentPinetry=$(sed -En '/^[ '$'\t'']*pinentry-program "?([^"]*)"?/{s//\1/p;q;}' "$gpgAgentConf")
	if [[ -n "$currentPinetry" && ( ! -f "$currentPinetry" || ! -x "$currentPinetry" ) ]] ;then
		log "Fixing '$gpgAgentConf'..."
		needHup=true
		log "Remove bad pinentry option"
		runAsUser sed -Ei '' 's/^[ '$'\t'']*pinentry-program .*//' "$gpgAgentConf"
	fi
	
	if $needHup ;then
		log "Force gpg-agent.conf reload."
		killall -HUP gpg-agent 2>/dev/null
	fi

	log "fixGPGAgent done"
}

function addDefaultConfig() {
	cd /usr/local/MacGPG2/etc/skel/.gnupg || return 1
	
	for config in *.conf; do
		if [[ ! -e "$GNUPGHOME/$config" ]]; then
			log "Copying $config from skeleton"
			runAsUser cp "$config" "$GNUPGHOME/"
		fi
	done
}


################################################################################

# Setting up the logfile.
logging

log "started with arguments: $@"


# Argument 1 contains a potentional USER ID to user and 
# argument 2 contains a potentional GNUPGHOME to use.
ACTUAL_UID=$UID
if [[ -n "$1" ]]; then
    ACTUAL_UID="$1"
    log "Overwrite UID: $ACTUAL_UID"
fi
if [[ "$ACTUAL_UID" == "0" || "$ACTUAL_UID" == "root" ]]; then
	log "ACTUAL_UID == 0. Exiting to prevent wrong permissions."
	exit 0
fi

GNUPGHOME=${GNUPGHOME:-$HOME/.gnupg}
if [[ -n "$2" ]]; then
    GNUPGHOME=$2
    log "Overwrite GNUPGHOME: $GNUPGHOME"
fi



fixGpgHome
fixGPGAgent

addDefaultConfig


log "done"

exit 0
